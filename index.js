#!/usr/bin/env node

const {calculateFromFile, printResult} = require('./lib/benchmark');

const commandLineArgs = require('command-line-args');
const commandLineUsage = require('command-line-usage');

const fs = require('fs');

const printUsage = (errors = []) => {
    const errorSection = {
        header: 'Errors detected',
        content: []
    };

    errors.forEach(err => {
        if (err && err.message) {
            errorSection.content.push(err.message);
        }
    });

    const sections = [
        {
            header: 'Speech Recognition Evaluation Utility',
            content: 'A simple utility to quickly evaluate any {italic Speech-to-Text (STT)} or {italic Automated Speech Recognition (ASR)} system.'
        },
        {
            header: 'Synopsis',
            content: [
                '$ asr-eval {bold --original} {underline file} {bold --generated} {underline file}',
                '$ asr-eval [{underline options}] {bold --original} {underline file} {bold --generated} {underline file}',
                '$ asr-eval {bold --help}'
            ],
        },
        {
            header: 'Options',
            optionList: [
                {
                    name: 'original',
                    alias: 'o',
                    type: String,
                    typeLabel: '{underline file}',
                    description: 'Original File to be used as reference. Usually, this should be the transcribed file by a Human being.'
                },
                {
                    name: 'generated',
                    alias: 'g',
                    type: String,
                    typeLabel: '{underline file}',
                    description: 'File with the output generated by Speech Recognition System.'
                },
                {
                    name: 'wer',
                    alias: 'e',
                    type: Boolean,
                    description: 'Default: true. Print Word Error Rate (WER).'
                },
                {
                    name: 'distance',
                    type: Boolean,
                    description: 'Default: false. Print total word distance after comparison.'
                },
                {
                    name: 'stats',
                    alias: 'e',
                    type: Boolean,
                    description: 'Default: false. Print statistics about original and generate files, before and after pre-processing. ' +
                        'Also prints statistics about word level and phrase level differences.'
                },
                {
                    name: 'pairs',
                    type: Boolean,
                    description: 'Default: false. Print all the difference pairs with type of difference.'
                },
                {
                    name: 'textcomparison',
                    alias: 'c',
                    type: Boolean,
                    description: 'Default: false. Print the text comparison between two files with highlighting.'
                },
                {
                    name: 'removespeakers',
                    alias: 's',
                    type: Boolean,
                    description: 'Default: true. Remove the speaker at the start of each line in files before calculations. ' +
                        'The speaker should be separated by colon ":" i.e. {italic speaker_name}: {italic text} ' +
                        'For e.g. "John Doe: Hello, I am John." would get converted to simply "Hello, I am John."'
                },
                {
                    name: 'removeannotations',
                    alias: 'a',
                    type: Boolean,
                    description: 'Default: true. Remove any custom annotations in the transcript before calculations. This is useful when removing custom annotations done by human transcribers. ' +
                        ' Anything in square brackets {italic []} are detected as annotations.' +
                        ' For e.g. "Hello, I am [inaudible 00:12] because of few reasons." would get converted to "Hello, I am because of few reasons." '
                },
                {
                    name: 'removewhitespaces',
                    alias: 'w',
                    type: Boolean,
                    description: 'Default: true. Remove any extra white spaces before calculations.'
                },
                {
                    name: 'removequotes',
                    alias: 'q',
                    type: Boolean,
                    description: 'Default: true. Remove any double quotes \'"\' from the files before calculations.'
                },
                {
                    name: 'removedashes',
                    alias: 'd',
                    type: Boolean,
                    description: 'Default: true. Remove any dashes (hyphens) "-" from the files before calculations.'
                },
                {
                    name: 'removepunctuations',
                    alias: 'p',
                    type: Boolean,
                    description: 'Default: true. Remove any punctuations ".,?!" from the files before calculations.'
                },
                {
                    name: 'lowercase',
                    alias: 'l',
                    type: Boolean,
                    description: 'Default: true. Convert both files to lower case before calculations. ' +
                        'This is useful if evaluation needs to be done in case-insensitive way.'
                },
                {
                    name: 'help',
                    alias: 'h',
                    type: Boolean,
                    description: 'Print this usage guide.'
                }
            ]
        },
        {
            content: 'Project home: {underline https://github.com/symblai/speech-recognition-evaluation}'
        }
    ];

    let _sections = sections;

    if (errorSection.content.length > 0) {
        _sections = [errorSection, ...sections];
    }
    console.log(commandLineUsage(_sections));
};


const optionDefinitions = [
    { name: 'original', alias: 'o', type: String, multiple: false },
    { name: 'generated', alias: 'g', type: String, multiple: false },
    { name: 'removespeakers', alias: 's', type: Boolean, defaultValue: true},
    { name: 'removeannotations', alias: 'a', type: Boolean, defaultValue: true},
    { name: 'removewhitespaces', alias: 'w', type: Boolean, defaultValue: true},
    { name: 'removequotes', alias: 'q', type: Boolean, defaultValue: true},
    { name: 'removedashes', alias: 'd', type: Boolean, defaultValue: true},
    { name: 'removepunctuations', alias: 'p', type: Boolean, defaultValue: true},
    { name: 'lowercase', alias: 'l', type: Boolean, defaultValue: true},
    { name: 'wer', alias: 'e', type: Boolean, defaultValue: true},
    { name: 'distance', type: Boolean, defaultValue: false},
    { name: 'stats', alias: 't', type: Boolean, defaultValue: false},
    { name: 'pairs', type: Boolean, defaultValue: false},
    { name: 'textcomparison', alias: 'c', type: Boolean, defaultValue: false},
    { name: 'help', alias: 'h', type: Boolean}
];
try {
    const options = commandLineArgs(optionDefinitions);

    function validateOptions(options) {
        const {original, generated} = options;
        const errors = [];
        if (!original || !fs.existsSync(original)) {
            errors.push({
                message: `File path provided in --original '${original}' is invalid or doesn't exist.`
            });
        }

        if (!generated || !fs.existsSync(generated)) {
            errors.push({
                message: `File path provided in --generated '${generated}' is invalid or doesn't exist.`
            });
        }
        return errors;
    }

    const {original, generated, help} = options;

    if (help) {
        printUsage();
    } else {
        const errors = validateOptions(options);
        if (errors.length > 0) {
            printUsage(errors);
        } else {
            let result = calculateFromFile(original, generated, {
                removeSpeakerStarters: options.removespeakers,
                removeAnnotations: options.removeannotations,
                removeExtraWhiteSpaces: options.removewhitespaces,
                removeQuotes: options.removequotes,
                removeDashes: options.removedashes,
                removePunctuations: options.removepunctuations,
                lowerCase: options.lowercase
            });
            printResult(result, {
                wer: options.wer,
                distance: options.distance,
                stats: options.stats,
                diffPairs: options.pairs,
                textComparison: options.textcomparison
            });
        }
    }
} catch (e) {
    printUsage([e]);
}